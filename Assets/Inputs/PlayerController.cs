//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Inputs/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Inputs"",
            ""id"": ""031e050c-23b8-4df5-abe3-defc1baae6bc"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Value"",
                    ""id"": ""d479d371-13f9-43ca-ae17-ecc3faf9ad4c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Value"",
                    ""id"": ""fb0abb71-5d8b-4332-b0d5-a82d87c1ee72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Top"",
                    ""type"": ""Value"",
                    ""id"": ""0f6c10b0-f22d-435b-a4b1-710dc8f75319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Bottom"",
                    ""type"": ""Value"",
                    ""id"": ""93528935-1daf-4335-9240-864cbe1a51e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Transfo1(top)"",
                    ""type"": ""Button"",
                    ""id"": ""5083e644-b67f-40c5-b08d-b901d3b86fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Transfo2(right)"",
                    ""type"": ""Button"",
                    ""id"": ""eec7fe1a-d4c4-4c17-a0df-dd6fa24b64f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Transfo3(bottom)"",
                    ""type"": ""Button"",
                    ""id"": ""df119700-22e2-4864-8d71-fa2efde9c8ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Transfo4(left)"",
                    ""type"": ""Button"",
                    ""id"": ""8bfab04e-c650-451c-8abd-95da44dcf94c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e2882aa-e135-4723-8eb0-57586b3932ee"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""419ef8f2-c7f0-41ba-9215-d376afc47dfb"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""423a17b3-6c80-4727-a9ed-300f67cdce87"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f2f10e4-927b-4e5e-bdc3-dae28f2ef9db"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bottom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a9304f4-1270-4fe1-b92c-ca07e03359fa"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transfo1(top)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9374a117-3f8c-4212-b7ee-2ff60ff42a5a"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transfo2(right)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da45cc4f-2f09-4948-87b4-859ca8bf354f"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transfo3(bottom)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2971c0b0-7ed1-4465-91d6-c4c6aabbaa10"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transfo4(left)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Inputs
        m_Inputs = asset.FindActionMap("Inputs", throwIfNotFound: true);
        m_Inputs_Left = m_Inputs.FindAction("Left", throwIfNotFound: true);
        m_Inputs_Right = m_Inputs.FindAction("Right", throwIfNotFound: true);
        m_Inputs_Top = m_Inputs.FindAction("Top", throwIfNotFound: true);
        m_Inputs_Bottom = m_Inputs.FindAction("Bottom", throwIfNotFound: true);
        m_Inputs_Transfo1top = m_Inputs.FindAction("Transfo1(top)", throwIfNotFound: true);
        m_Inputs_Transfo2right = m_Inputs.FindAction("Transfo2(right)", throwIfNotFound: true);
        m_Inputs_Transfo3bottom = m_Inputs.FindAction("Transfo3(bottom)", throwIfNotFound: true);
        m_Inputs_Transfo4left = m_Inputs.FindAction("Transfo4(left)", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inputs
    private readonly InputActionMap m_Inputs;
    private IInputsActions m_InputsActionsCallbackInterface;
    private readonly InputAction m_Inputs_Left;
    private readonly InputAction m_Inputs_Right;
    private readonly InputAction m_Inputs_Top;
    private readonly InputAction m_Inputs_Bottom;
    private readonly InputAction m_Inputs_Transfo1top;
    private readonly InputAction m_Inputs_Transfo2right;
    private readonly InputAction m_Inputs_Transfo3bottom;
    private readonly InputAction m_Inputs_Transfo4left;
    public struct InputsActions
    {
        private @PlayerController m_Wrapper;
        public InputsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Inputs_Left;
        public InputAction @Right => m_Wrapper.m_Inputs_Right;
        public InputAction @Top => m_Wrapper.m_Inputs_Top;
        public InputAction @Bottom => m_Wrapper.m_Inputs_Bottom;
        public InputAction @Transfo1top => m_Wrapper.m_Inputs_Transfo1top;
        public InputAction @Transfo2right => m_Wrapper.m_Inputs_Transfo2right;
        public InputAction @Transfo3bottom => m_Wrapper.m_Inputs_Transfo3bottom;
        public InputAction @Transfo4left => m_Wrapper.m_Inputs_Transfo4left;
        public InputActionMap Get() { return m_Wrapper.m_Inputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputsActions set) { return set.Get(); }
        public void SetCallbacks(IInputsActions instance)
        {
            if (m_Wrapper.m_InputsActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnRight;
                @Top.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnTop;
                @Top.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnTop;
                @Top.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnTop;
                @Bottom.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnBottom;
                @Bottom.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnBottom;
                @Bottom.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnBottom;
                @Transfo1top.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo1top;
                @Transfo1top.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo1top;
                @Transfo1top.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo1top;
                @Transfo2right.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo2right;
                @Transfo2right.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo2right;
                @Transfo2right.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo2right;
                @Transfo3bottom.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo3bottom;
                @Transfo3bottom.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo3bottom;
                @Transfo3bottom.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo3bottom;
                @Transfo4left.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo4left;
                @Transfo4left.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo4left;
                @Transfo4left.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnTransfo4left;
            }
            m_Wrapper.m_InputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Top.started += instance.OnTop;
                @Top.performed += instance.OnTop;
                @Top.canceled += instance.OnTop;
                @Bottom.started += instance.OnBottom;
                @Bottom.performed += instance.OnBottom;
                @Bottom.canceled += instance.OnBottom;
                @Transfo1top.started += instance.OnTransfo1top;
                @Transfo1top.performed += instance.OnTransfo1top;
                @Transfo1top.canceled += instance.OnTransfo1top;
                @Transfo2right.started += instance.OnTransfo2right;
                @Transfo2right.performed += instance.OnTransfo2right;
                @Transfo2right.canceled += instance.OnTransfo2right;
                @Transfo3bottom.started += instance.OnTransfo3bottom;
                @Transfo3bottom.performed += instance.OnTransfo3bottom;
                @Transfo3bottom.canceled += instance.OnTransfo3bottom;
                @Transfo4left.started += instance.OnTransfo4left;
                @Transfo4left.performed += instance.OnTransfo4left;
                @Transfo4left.canceled += instance.OnTransfo4left;
            }
        }
    }
    public InputsActions @Inputs => new InputsActions(this);
    public interface IInputsActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnTop(InputAction.CallbackContext context);
        void OnBottom(InputAction.CallbackContext context);
        void OnTransfo1top(InputAction.CallbackContext context);
        void OnTransfo2right(InputAction.CallbackContext context);
        void OnTransfo3bottom(InputAction.CallbackContext context);
        void OnTransfo4left(InputAction.CallbackContext context);
    }
}
